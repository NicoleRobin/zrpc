// Code generated by protoc-gen-zrpc. DO NOT EDIT.
//
// version: protoc-gen-zrpc v1.0.0
// source: example.proto

package example

import (
	context "context"
	client "github.com/nicolerobin/zrpc/client"
	rpc "github.com/nicolerobin/zrpc/core/rpc"
	server "github.com/nicolerobin/zrpc/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
)

type wrappedGreeterClient struct {
	cm rpc.ClientGetter
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &wrappedGreeterClient{
		cm: rpc.NewRawGetter(cc),
	}
}

func (w *wrappedGreeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	var err error

	defer func() {
		w.cm.Close(err)
	}()

	c, err := w.cm.GetClient(ctx)
	if err != nil {
		return nil, err
	}

	out := new(HelloReply)
	err = c.Invoke(ctx, "/example.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

// GetGreeterClient gets the default service client named example
var GetGreeterClient = func() GreeterClient {
	return &wrappedGreeterClient{
		cm: client.Get("example"),
	}
}

// GetNamedGreeterClientgets the named service client specified by name.
var GetNamedGreeterClient = func(name string) GreeterClient {
	return &wrappedGreeterClient{
		cm: client.Get(name),
	}
}

type greeterMocker struct {
	defaultClient func() GreeterClient
	namedClient   func(string) GreeterClient
}

func (m *greeterMocker) Mock(mocker func() GreeterClient) {
	m.defaultClient = GetGreeterClient
	GetGreeterClient = func() GreeterClient {
		return mocker().(GreeterClient)
	}
}

func (m *greeterMocker) MockNamed(mocker func(name string) GreeterClient) {
	m.namedClient = GetNamedGreeterClient
	GetNamedGreeterClient = func(name string) GreeterClient {
		return mocker(name).(GreeterClient)
	}
}

func (m *greeterMocker) Reset() {
	if m.defaultClient != nil {
		GetGreeterClient = m.defaultClient
	}
}

func (m *greeterMocker) ResetNamed() {
	if m.namedClient != nil {
		GetNamedGreeterClient = m.namedClient
	}
}

// GreeterMocker is a mocker which is used to mock GreeterClient.
var GreeterMocker = new(greeterMocker)

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&greeterServiceDesc, srv)
}

type greeterServiceRegister struct {
}

func (s *greeterServiceRegister) RegisterService(server grpc.ServiceRegistrar, handler interface{}) {
	RegisterGreeterServer(server, handler.(GreeterServer))
}

var GreeterService = &greeterServiceRegister{}

func RegisterZrpcGreeterServer(srv GreeterServer) {
	server.RegisterService(GreeterService, srv)
}

func greeterSayHelloHandler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	return interceptor(ctx, in, info, handler)
}

type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "methodSayHello not implemented")
}

var greeterServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			Handler:    greeterSayHelloHandler,
			MethodName: "SayHello",
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}

const (
	GreeterRPC_SayHello = "/example.Greeter/SayHello"
)

func init() {
	rpc.RegisterTypeInfo(GreeterRPC_SayHello, rpc.TypeInfo{
		Request: (*HelloRequest)(nil),
		Returns: (*HelloReply)(nil),
		NewRequest: func() proto.Message {
			return new(HelloRequest)
		},
		NewReturns: func() proto.Message {
			return new(HelloReply)
		},
	})
}
