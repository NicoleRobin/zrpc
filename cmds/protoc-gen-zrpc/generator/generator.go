package generator

import (
	"github.com/nicolerobin/zrpc/cmds/protoc-gen-zrpc/constant"
	"google.golang.org/protobuf/cmd/protoc-gen-go/internal_gengo"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

const (
	errorsPackage  = "errors"
	contextPackage = "context"
	clientPackage  = protogen.GoImportPath("")
	serverPackage  = protogen.GoImportPath("")
	rpcPackage     = protogen.GoImportPath("")
)

func Generate() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if f.Generate {
				genFile(gen, f)
			}
		}
		return nil
	})
}

func genFile(gen *protogen.Plugin, f *protogen.File) {
	genGo(gen, f)
	genRpc(gen, f)
}

func genGo(gen *protogen.Plugin, file *protogen.File) {
	internal_gengo.GenerateFile(gen, file)
}

func genRpc(gen *protogen.Plugin, file *protogen.File) {
	if len(file.Services) == 0 {
		return
	}

	name := file.GeneratedFilenamePrefix + "_grpc.pb.go"
	g := gen.NewGeneratedFile(name, file.GoImportPath)

	g.P("// Code generated by protoc-gen-zrpc. DO NOT EDIT.")
	g.P("//")
	g.P("// version: protoc-gen-zrpc ", constant.Version)
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)

	pkg := string(file.Desc.Package())
	clientGetter := g.QualifiedGoIdent(rpcPackage.Ident("ClientGetter"))
	serverRegister := g.QualifiedGoIdent(serverPackage.Ident("RegisterService"))

	for _, service := range file.Services {
		r := serviceRender{
			service:        service,
			pkgName:        pkg,
			fileName:       service.Desc.ParentFile().Path(),
			clientGetter:   clientGetter,
			serverRegister: serverRegister,
		}

		g.P(r.render(file))
		g.P()
	}
}

type rpcMethodInfo struct {
	protoMethodName      string
	methodName           string
	name                 string
	methodPath           string
	handlerName          string
	reqType              string
	repType              string
	streamIndex          int
	streamParamName      string
	serverStreamName     string
	serverStreamTypeName string
	isClientStream       bool
	isServerStream       bool
}

type serviceRender struct {
	service        *protogen.Service
	pkgName        string
	fileName       string
	clientGetter   string
	serverRegister string

	serviceFullName     string
	serviceName         string
	serviceDesc         string
	clientTypeName      string
	clientInterfaceName string
	serverInterfaceName string
	rpcInfo             []rpcMethodInfo
}

func (s *serviceRender) render(file *protogen.File) string {
	return ""
}
